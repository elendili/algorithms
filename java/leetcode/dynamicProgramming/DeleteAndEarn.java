package leetcode.dynamicProgramming;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * https://leetcode.com/problems/delete-and-earn/
 * <p>
 * You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:
 * <p>
 * Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.
 * Return the maximum number of points you can earn by applying the above operation some number of times.
 */
public class DeleteAndEarn {

    int recursiveSearch(int[] freqs, int[] dp, int from, int toExcl, int level) {
        if (from >= toExcl) {
            return 0;
        } else {
            int out = 0;
            for (int i = from; i < toExcl; i++) {
                if (dp[i]<=0){
                    dp[i]=recursiveSearch(freqs, dp, i + 2, toExcl, level + 1);
                }
                int newV = i * freqs[i] + dp[i];
                out = Math.max(out, newV);
            }
            return out;
        }
    }

    public int deleteAndEarn(int[] nums) {
        // create frequencies map
        int[] freqsA = new int[10_001];
        for (int i : nums) {
            freqsA[i]++;
        }
        int out = 0;
        int prev = 0;
        int[] dp = new int[freqsA.length]; // memory service :)
        for (int i = 0; i < freqsA.length; i++) {
            // split by chunks where neighbours are bigger or smaller and will not be affected by removal
            if(freqsA[i]==0){
                prev++;
            } else if (i == freqsA.length - 1 || freqsA[i+1]==0) {
                out += recursiveSearch(freqsA, dp, prev, i + 1, 0);
                prev = i + 1;
            }
        }
        return out;

    }


    @Test
    public void test() {
        assertEquals(6, deleteAndEarn(new int[]{3, 4, 2}));
    }

    @Test
    public void test2() {
        assertEquals(9, deleteAndEarn(new int[]{2, 2, 3, 3, 3, 4}));
    }

    @Test
    public void test3() {
        assertEquals(9, deleteAndEarn(new int[]{1, 2, 3, 4, 5}));
    }

    @Test
    public void test4() {
        assertEquals(9, deleteAndEarn(new int[]{1, 2, 2, 3, 4, 5}));
    }

    @Test
    public void test5() {
        assertEquals(0, deleteAndEarn(new int[]{}));
        assertEquals(2, deleteAndEarn(new int[]{2}));
        assertEquals(6, deleteAndEarn(new int[]{2, 2, 2}));
    }

    @Test
    public void test6() {
        assertEquals(104, deleteAndEarn(new int[]{100, 1, 2, 3}));
    }

    @Test
    public void test7() {
        assertEquals(13, deleteAndEarn(new int[]{3, 4, 4, 4, 5, 5}));
    }

    @Test
    public void test8() {
        assertEquals(3451, deleteAndEarn(new int[]{
                12, 32, 93, 17, 100, 72, 40, 71, 37, 92, 58, 34, 29, 78, 11, 84, 77, 90, 92, 35, 12, 5, 27, 92, 91, 23, 65, 91, 85, 14, 42, 28, 80, 85, 38, 71, 62, 82, 66, 3, 33, 33, 55, 60, 48, 78, 63, 11, 20, 51, 78, 42, 37, 21, 100, 13, 60, 57, 91, 53, 49, 15, 45, 19, 51, 2, 96, 22, 32, 2, 46, 62, 58, 11, 29, 6, 74, 38, 70, 97, 4, 22, 76, 19, 1, 90, 63, 55, 64, 44, 90, 51, 36, 16, 65, 95, 64, 59, 53, 93
        }));
    }


    @Test
    public void test9() {
        assertEquals(6238, deleteAndEarn(new int[]{
                37, 6, 8, 34, 67, 54, 13, 26, 41, 54, 58, 34, 96, 40, 52, 59, 95, 61, 39, 30, 76, 99, 93, 34, 63, 77, 37, 47, 74, 65, 85, 93, 20, 43, 29, 60, 63, 46, 17, 28, 73, 49, 1, 71, 99, 93, 46, 29, 1, 44, 93, 64, 84, 73, 2, 10, 22, 87, 14, 70, 32, 58, 20, 87, 57, 17, 55, 55, 15, 16, 38, 67, 98, 78, 61, 13, 92, 32, 75, 64, 78, 25, 85, 34, 51, 28, 100, 30, 10, 45, 65, 52, 13, 80, 35, 8, 84, 1, 60, 11, 54, 92, 22, 26, 54, 30, 97, 54, 62, 59, 92, 64, 21, 69, 88, 27, 73, 20, 42, 5, 52, 93, 46, 71, 75, 63, 77, 18, 27, 14, 45, 72, 80, 36, 30, 89, 49, 79, 18, 24, 39, 9, 30, 27, 69, 7, 100, 56, 30, 77, 89, 97, 20, 65, 38, 17, 19, 92, 84, 99, 21, 49, 62, 52, 19, 78, 47, 62, 79, 29, 64, 36, 7, 9, 69, 80, 20, 24, 78, 93, 54, 79, 54, 96, 72, 76, 5, 63, 33, 20, 32, 36, 69, 69, 11, 35, 71, 79, 66, 46
        }));
    }

    @Test
    public void z1() {
        assertEquals(14251, deleteAndEarn(new int[]{
                94, 27, 27, 27, 34, 82, 97, 93, 62, 10, 78, 25, 23, 41, 53, 16, 81, 93, 52, 53, 74, 78, 18, 27, 66, 62, 40, 50, 8, 20, 31, 77, 26, 82, 28, 60, 98, 94, 26, 30, 23, 49, 54, 80, 69, 28, 25, 32, 78, 7, 1, 73, 2, 31, 99, 78, 50, 95, 28, 53, 60, 78, 71, 52, 25, 85, 21, 16, 20, 78, 96, 96, 65, 1, 19, 18, 24, 18, 55, 69, 88, 76, 14, 23, 58, 17, 83, 43, 63, 9, 41, 6, 71, 7, 2, 20, 21, 63, 18, 36, 53, 95, 36, 11, 32, 64, 52, 48, 52, 11, 50, 48, 35, 49, 24, 89, 72, 33, 60, 57, 46, 3, 24, 90, 20, 95, 87, 8, 93, 1, 47, 2, 66, 45, 57, 75, 18, 76, 96, 67, 65, 92, 92, 41, 57, 60, 98, 98, 10, 64, 23, 86, 100, 20, 21, 93, 49, 54, 77, 77, 34, 98, 94, 4, 9, 75, 67, 4, 31, 82, 87, 26, 70, 26, 59, 86, 100, 22, 15, 61, 57, 73, 54, 54, 76, 82, 56, 63, 49, 46, 53, 71, 32, 1, 64, 48, 20, 71, 2, 60, 83, 80, 97, 30, 2, 57, 31, 82, 21, 63, 52, 46, 71, 55, 58, 94, 16, 9, 62, 67, 74, 79, 87, 31, 53, 27, 80, 11, 33, 52, 73, 2, 88, 80, 9, 38, 37, 3, 79, 24, 89, 75, 10, 97, 24, 63, 24, 47, 80, 56, 75, 23, 32, 58, 72, 80, 95, 28, 57, 37, 17, 48, 14, 85, 58, 61, 58, 1, 37, 14, 34, 76, 11, 63, 67, 7, 9, 8, 74, 38, 97, 56, 25, 67, 9, 34, 62, 58, 72, 77, 15, 15, 90, 36, 60, 39, 95, 61, 28, 44, 43, 56, 22, 12, 81, 13, 10, 91, 84, 46, 39, 35, 39, 65, 82, 41, 51, 19, 76, 99, 75, 88, 43, 89, 21, 83, 6, 35, 21, 47, 4, 21, 51, 76, 63, 43, 71, 39, 43, 16, 36, 78, 35, 68, 75, 81, 91, 97, 7, 82, 44, 73, 56, 39, 76, 21, 76, 87, 98, 6, 38, 96, 84, 96, 77, 84, 83, 28, 52, 100, 6, 52, 78, 7, 91, 96, 97, 62, 32, 26, 7, 80, 71, 25, 58, 23, 54, 74, 81, 4, 84, 35, 83, 58, 64, 42, 38, 30, 88, 87, 52, 95, 23, 31, 31, 55, 7, 20, 18, 84, 40, 14, 93, 40, 45, 69, 84, 30, 66, 6, 88, 41, 88, 98, 80, 69, 64, 1, 100, 48, 2, 89, 6, 21, 45, 73, 77, 31, 20, 70, 89, 30, 53, 33, 59, 8, 82, 63, 17, 10, 46, 49, 86, 9, 14, 68, 6, 15, 55, 36, 71, 64, 80, 59, 40, 60, 46, 24, 49, 45, 78, 38, 92, 43, 99, 78, 5, 83, 57, 76, 34, 11, 93, 71, 71, 54, 54, 29, 29, 74, 83, 72, 1, 6, 56, 22, 85, 35, 48, 29
        }));
    }

    @Test
    public void A2() {
        assertEquals(27853, deleteAndEarn(new int[]{
                61, 97, 57, 74, 56, 25, 58, 64, 74, 44, 36, 44, 62, 36, 59, 83, 35, 82, 62, 74, 23, 95, 84, 32, 18, 20, 47, 97, 63, 76, 90, 44, 44, 84, 21, 18, 65, 21, 56, 39, 87, 56, 21, 1, 51, 96, 18, 42, 29, 86, 16, 38, 13, 29, 30, 53, 34, 72, 87, 79, 35, 31, 53, 66, 49, 40, 76, 24, 10, 84, 6, 43, 59, 27, 26, 58, 16, 39, 45, 3, 92, 62, 28, 22, 1, 89, 17, 52, 94, 48, 10, 6, 72, 25, 48, 92, 97, 67, 19, 60, 19, 30, 3, 26, 62, 43, 5, 81, 59, 45, 100, 15, 25, 76, 38, 40, 9, 84, 52, 85, 55, 100, 96, 80, 5, 24, 91, 19, 55, 19, 62, 14, 41, 39, 43, 12, 11, 37, 43, 74, 82, 41, 26, 81, 10, 78, 24, 76, 11, 66, 26, 66, 14, 13, 70, 76, 8, 84, 47, 48, 27, 65, 75, 29, 17, 7, 23, 12, 23, 82, 70, 41, 14, 33, 92, 41, 91, 14, 60, 47, 17, 8, 52, 59, 21, 10, 21, 57, 1, 69, 40, 96, 41, 37, 70, 25, 90, 46, 18, 6, 41, 99, 98, 74, 47, 68, 86, 89, 99, 81, 75, 14, 23, 38, 84, 29, 15, 64, 59, 43, 85, 41, 46, 88, 20, 13, 48, 100, 51, 9, 77, 7, 77, 94, 93, 76, 24, 54, 51, 88, 26, 39, 24, 64, 65, 59, 49, 86, 64, 21, 25, 31, 1, 94, 94, 69, 5, 70, 4, 44, 50, 80, 39, 11, 44, 61, 47, 44, 55, 36, 30, 91, 2, 67, 79, 34, 88, 88, 95, 92, 98, 31, 60, 32, 84, 27, 1, 28, 48, 51, 28, 49, 23, 38, 76, 86, 80, 76, 64, 7, 51, 2, 48, 47, 15, 29, 74, 35, 81, 92, 4, 75, 62, 13, 66, 59, 50, 80, 23, 8, 82, 50, 50, 58, 12, 95, 35, 32, 49, 34, 23, 61, 23, 14, 9, 82, 47, 32, 96, 98, 88, 25, 28, 93, 18, 77, 68, 12, 98, 56, 3, 19, 69, 24, 49, 25, 52, 69, 93, 69, 64, 45, 49, 28, 79, 44, 81, 44, 59, 17, 15, 34, 97, 75, 43, 36, 82, 32, 46, 1, 92, 21, 8, 73, 54, 34, 30, 3, 82, 33, 95, 66, 39, 98, 49, 55, 41, 12, 19, 91, 10, 85, 64, 51, 41, 24, 68, 49, 20, 99, 18, 58, 98, 30, 96, 64, 35, 55, 45, 5, 71, 6, 15, 37, 10, 32, 71, 34, 98, 65, 70, 40, 29, 91, 43, 64, 18, 11, 18, 8, 25, 5, 37, 78, 58, 11, 88, 85, 20, 52, 11, 58, 15, 76, 21, 22, 56, 96, 55, 19, 71, 63, 87, 53, 92, 68, 72, 89, 24, 64, 23, 92, 69, 33, 94, 7, 75, 70, 42, 61, 22, 95, 68, 19, 37, 25, 20, 85, 35, 46, 100, 76, 87, 86, 3, 22, 79, 66, 20, 30, 69, 19, 60, 18, 27, 25, 96, 95, 17, 70, 75, 29, 21, 55, 55, 69, 22, 80, 31, 60, 62, 66, 35, 95, 30, 23, 19, 28, 81, 46, 56, 3, 76, 66, 37, 95, 99, 94, 78, 77, 43, 45, 34, 70, 47, 9, 82, 93, 9, 6, 57, 70, 87, 28, 31, 93, 96, 62, 17, 87, 78, 33, 73, 57, 45, 89, 89, 35, 38, 58, 12, 10, 34, 77, 71, 11, 92, 52, 22, 32, 31, 11, 24, 76, 89, 28, 44, 1, 20, 18, 52, 80, 4, 82, 49, 97, 11, 45, 4, 5, 88, 45, 36, 84, 82, 74, 62, 47, 89, 32, 35, 45, 92, 3, 63, 58, 82, 4, 66, 70, 20, 100, 63, 77, 97, 49, 9, 79, 10, 41, 28, 68, 40, 40, 95, 76, 97, 3, 41, 43, 17, 88, 29, 30, 72, 85, 94, 84, 89, 13, 7, 2, 61, 6, 9, 12, 94, 65, 28, 6, 27, 94, 4, 21, 26, 16, 52, 15, 47, 73, 35, 45, 10, 94, 76, 84, 72, 60, 16, 92, 94, 96, 75, 96, 13, 53, 57, 47, 46, 67, 79, 26, 68, 79, 67, 61, 42, 13, 32, 2, 91, 34, 76, 99, 96, 18, 65, 7, 36, 91, 70, 33, 43, 67, 72, 90, 33, 77, 20, 9, 54, 17, 68, 26, 67, 85, 28, 34, 11, 95, 66, 74, 47, 80, 42, 94, 87, 100, 64, 94, 3, 5, 60, 48, 9, 51, 41, 5, 8, 49, 85, 13, 95, 34, 94, 3, 54, 100, 11, 85, 74, 8, 99, 55, 91, 28, 19, 70, 16, 77, 36, 23, 5, 90, 6, 75, 46, 82, 88, 57, 64, 94, 55, 50, 46, 35, 70, 68, 88, 68, 10, 63, 98, 9, 3, 18, 55, 55, 84, 45, 62, 26, 4, 6, 28, 44, 70, 69, 45, 71, 19, 76, 79, 62, 2, 46, 40, 32, 58, 61, 1, 58, 65, 56, 37, 45, 38, 47, 2, 32, 84, 75, 65, 36, 51, 14, 30, 71, 41, 17, 100, 13, 58, 70, 58, 24, 73, 85, 63, 36, 84, 76, 73, 72, 65, 26, 64, 93, 9, 21, 63, 39, 34, 46, 4, 17, 24, 46, 20, 91, 59, 51, 59, 63, 5, 55, 5, 17, 19, 45, 21, 96, 24, 96, 87, 79, 7, 78, 18, 87, 64, 57, 89, 64, 80, 74, 93, 5, 76, 38, 27, 87, 18, 95, 8, 76, 27, 9, 70, 95, 70, 72, 27, 87, 42, 70, 11, 46, 14, 8, 79, 29, 79, 46, 79, 23, 75, 51, 63, 37, 52, 42, 53, 88, 45, 19, 74, 71, 32, 4, 56, 49, 93, 86, 84, 95, 90, 90, 8, 62, 87, 52, 41, 59, 35, 95, 24, 62, 40, 75, 33, 2, 81, 92, 33, 92, 6, 40, 12, 44, 57, 24, 90, 25, 14, 10, 82, 61, 6, 76, 48, 71, 39, 10, 96, 93, 31, 68, 53, 29, 56, 7, 52, 77, 79, 42, 24, 18, 57, 61
        }));
    }

}
